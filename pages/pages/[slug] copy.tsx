// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/react-web/lib/host";
import GlobalContextsProvider from "../../components/plasmic/seodapop_main_website/PlasmicGlobalContextsProvider";
import { PlasmicPagesslug } from "../../components/plasmic/seodapop_main_website/PlasmicPagesslug";
import { useRouter } from "next/router";
import { GetStaticPaths } from "next/types";
import sanity from "../../sanity";

interface PageDetailProps {
  slug: string;
  _id: string;
  body: any;
}

function Pagesslug({ individualPageDetail }: { individualPageDetail: PageDetailProps }) {
  // Use PlasmicPagesslug to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicPagesslug are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicPagesslug is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).
  return (
    <GlobalContextsProvider>
      <ph.PageParamsProvider
        params={useRouter()?.query}
        query={useRouter()?.query}
      >
        {/* <div>{individualPageDetail.title}</div>
        <RichText values={individualPageDetail.body} /> */}
        <PlasmicPagesslug />
      </ph.PageParamsProvider>
    </GlobalContextsProvider>
  );
}


export const getStaticProps = async ({
  params: { slug },
}: {
  params: { slug: string };
}) => {
  const individualPageDetailQuery = `*[_type == "page" && slug.current == "${slug}"][0] {
		_id,
		_createdAt,
		title,
		body,
		'slug': slug.current,
    
	 }
	 `;
  const individualPageDetail = await sanity.fetch(individualPageDetailQuery);
  return {
    props: { individualPageDetail },
    revalidate: 3600,
  };
};

export const getStaticPaths: GetStaticPaths = async () => {

  const pageListQuery = `*[_type == "page"] {
    'slug': slug.current,
	 }
	 `;

  const pageList = (await sanity.fetch(pageListQuery)) || [];
  const paths = pageList.map((page: { slug: string }) => ({
    params: { slug: page.slug },
  }));
  return {
    paths,
    fallback: false,
  };

};
export default Pagesslug;
