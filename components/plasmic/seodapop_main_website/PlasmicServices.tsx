// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eSHiknYGb4WLC3QGLYLFnQ
// Component: A3je2_yhMh6rvk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: UvDP15VkVO5hmb/component
import ServiceWhite from "../../ServiceWhite"; // plasmic-import: h9Deuef5XKQXuA/component
import BlueBdr from "../../BlueBdr"; // plasmic-import: FQ-Q35VXL2xeid/component
import ServiceDark from "../../ServiceDark"; // plasmic-import: iZiKFaA41wnFXi/component
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: Sh8nt7GR3decD/component
import FooterMain from "../../FooterMain"; // plasmic-import: I_5el5M-Bk81Xi/component

import { useScreenVariants as useScreenVariantspgBiFjijh7ROsO } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PgBiFjijh7ROsO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_seodapop_main_website.module.css"; // plasmic-import: eSHiknYGb4WLC3QGLYLFnQ/projectcss
import sty from "./PlasmicServices.module.css"; // plasmic-import: A3je2_yhMh6rvk/css

export type PlasmicServices__VariantMembers = {};
export type PlasmicServices__VariantsArgs = {};
type VariantPropType = keyof PlasmicServices__VariantsArgs;
export const PlasmicServices__VariantProps = new Array<VariantPropType>();

export type PlasmicServices__ArgsType = {};
type ArgPropType = keyof PlasmicServices__ArgsType;
export const PlasmicServices__ArgProps = new Array<ArgPropType>();

export type PlasmicServices__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  aboutUsBanner?: p.Flex<"div">;
  foreground2?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  serviceRow?: p.Flex<"div">;
  serviceRow2?: p.Flex<"div">;
  serviceRow3?: p.Flex<"div">;
  footerTopSection?: p.Flex<"div">;
  homeFooterTop?: p.Flex<typeof HomeFooterTop>;
  footerMain?: p.Flex<typeof FooterMain>;
};

export interface DefaultServicesProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicServices__RenderFunc(props: {
  variants: PlasmicServices__VariantsArgs;
  args: PlasmicServices__ArgsType;
  overrides: PlasmicServices__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspgBiFjijh7ROsO()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicServices.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicServices.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicServices.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"aboutUsBanner"}
            data-plasmic-override={overrides.aboutUsBanner}
            className={classNames(projectcss.all, sty.aboutUsBanner)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vTpKz)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Services"}
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p14UA
                  )}
                >
                  {hasVariant(globalVariants, "screen", "sm")
                    ? "Lorem Ipsum is simply dummy text of the printing and typesetting indstandard dummy text ever since the 1500s."
                    : "Lorem Ipsum is simply dummy text of the printing and typesetting indstandard dummy text ever since the 1500s."}
                </div>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__l2DWg)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fJ1Nh)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oZdWq)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__buFN)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__iu7Hm
                    )}
                  >
                    {"Service type"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eixxt
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."
                    }
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zknGz)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"serviceRow"}
                    data-plasmic-override={overrides.serviceRow}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.serviceRow)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__iPgC)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__ht2Ye
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__bUIxJ
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__aoByr)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__kp4Fy
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__eXD
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__bi0Kq)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__a9Ih
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__fkdIf
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___33D32)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__pTq1X
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__quIf6
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__rDvQ5)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__jx7E
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__u0Eis
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__qkxIi)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite___1MfRc
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__jOJo3
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___4Fecg)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0LvCp)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__q7Dr)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8OAlw)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__qN49
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "sm")
                      ? "Service category"
                      : "Service type"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jQFbS
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy"
                    }
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qcyLi)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"serviceRow2"}
                    data-plasmic-override={overrides.serviceRow2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.serviceRow2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__kwQ96)}
                    >
                      {true ? (
                        <ServiceDark
                          className={classNames(
                            "__wab_instance",
                            sty.serviceDark__yfV1L
                          )}
                          slot={
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."
                          }
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__shBx)}
                    >
                      {true ? (
                        <ServiceDark
                          className={classNames(
                            "__wab_instance",
                            sty.serviceDark___5Olkd
                          )}
                          slot={
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___50FsP
                            )}
                          >
                            {"Service name 3"}
                          </div>
                        </ServiceDark>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___4KfVz)}
                    >
                      {true ? (
                        <ServiceDark
                          className={classNames(
                            "__wab_instance",
                            sty.serviceDark__r2UBw
                          )}
                          slot={
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."
                          }
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___5PhH)}
                    >
                      {true ? (
                        <ServiceDark
                          className={classNames(
                            "__wab_instance",
                            sty.serviceDark__pdAEs
                          )}
                          slot={
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."
                          }
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__zvOd)}
                    >
                      {true ? (
                        <ServiceDark
                          className={classNames(
                            "__wab_instance",
                            sty.serviceDark___9HqNz
                          )}
                          slot={
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."
                          }
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__fp32)}
                    >
                      {true ? (
                        <ServiceDark
                          className={classNames(
                            "__wab_instance",
                            sty.serviceDark__in0A
                          )}
                          slot={
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."
                          }
                        />
                      ) : null}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__eljaB)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hn8Jh)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iFInV)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vRb3L)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__lxKr
                    )}
                  >
                    {"Service type"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ujX0Q
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."
                    }
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tiWaz)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"serviceRow3"}
                    data-plasmic-override={overrides.serviceRow3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.serviceRow3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__c4UEb)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__r5Ago
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__uIajj
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__j3U9E)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__y7W7S
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__hdkom
                            )}
                          >
                            {"Services 2"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__rfj81)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__dbP7
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__g7A3
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__hYRv)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__qqSFh
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__nvvY
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__q07Wk)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__zSuDn
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__kMwZy
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__gmCi0)}
                    >
                      {true ? (
                        <ServiceWhite
                          className={classNames(
                            "__wab_instance",
                            sty.serviceWhite__sjIGu
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__uk5Fy
                            )}
                          >
                            {"Service name"}
                          </h3>
                        </ServiceWhite>
                      ) : null}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <div
            data-plasmic-name={"footerTopSection"}
            data-plasmic-override={overrides.footerTopSection}
            className={classNames(projectcss.all, sty.footerTopSection)}
          >
            <HomeFooterTop
              data-plasmic-name={"homeFooterTop"}
              data-plasmic-override={overrides.homeFooterTop}
              className={classNames("__wab_instance", sty.homeFooterTop)}
            />
          </div>
          <FooterMain
            data-plasmic-name={"footerMain"}
            data-plasmic-override={overrides.footerMain}
            className={classNames("__wab_instance", sty.footerMain)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "aboutUsBanner",
    "foreground2",
    "h1",
    "serviceRow",
    "serviceRow2",
    "serviceRow3",
    "footerTopSection",
    "homeFooterTop",
    "footerMain"
  ],
  header: ["header"],
  aboutUsBanner: ["aboutUsBanner", "foreground2", "h1"],
  foreground2: ["foreground2", "h1"],
  h1: ["h1"],
  serviceRow: ["serviceRow"],
  serviceRow2: ["serviceRow2"],
  serviceRow3: ["serviceRow3"],
  footerTopSection: ["footerTopSection", "homeFooterTop"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  aboutUsBanner: "div";
  foreground2: "div";
  h1: "h1";
  serviceRow: "div";
  serviceRow2: "div";
  serviceRow3: "div";
  footerTopSection: "div";
  homeFooterTop: typeof HomeFooterTop;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServices__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServices__VariantsArgs;
    args?: PlasmicServices__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicServices__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicServices__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicServices__ArgProps,
          internalVariantPropNames: PlasmicServices__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicServices__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServices";
  } else {
    func.displayName = `PlasmicServices.${nodeName}`;
  }
  return func;
}

export const PlasmicServices = Object.assign(
  // Top-level PlasmicServices renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    aboutUsBanner: makeNodeComponent("aboutUsBanner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    serviceRow: makeNodeComponent("serviceRow"),
    serviceRow2: makeNodeComponent("serviceRow2"),
    serviceRow3: makeNodeComponent("serviceRow3"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicServices
    internalVariantProps: PlasmicServices__VariantProps,
    internalArgProps: PlasmicServices__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Service",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicServices;
/* prettier-ignore-end */
