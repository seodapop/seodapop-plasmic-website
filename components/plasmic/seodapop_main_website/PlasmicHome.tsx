// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eSHiknYGb4WLC3QGLYLFnQ
// Component: ZGwlmbejnPqDZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: UvDP15VkVO5hmb/component
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: Sh8nt7GR3decD/component
import FooterMain from "../../FooterMain"; // plasmic-import: I_5el5M-Bk81Xi/component

import { useScreenVariants as useScreenVariantspgBiFjijh7ROsO } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PgBiFjijh7ROsO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_seodapop_main_website.module.css"; // plasmic-import: eSHiknYGb4WLC3QGLYLFnQ/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: ZGwlmbejnPqDZ/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: 6Qw7--xFaSy2Vf/icon

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  foreground2?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  h3?: p.Flex<"h3">;
  contactButton?: p.Flex<"button">;
  button?: p.Flex<"button">;
  homeFooterTop?: p.Flex<typeof HomeFooterTop>;
  footerMain?: p.Flex<typeof FooterMain>;
};

export interface DefaultHomeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspgBiFjijh7ROsO()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHome.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHome.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHome.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__c8R7A)}>
              <div className={classNames(projectcss.all, sty.freeBox__kRtGh)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground2"}
                  data-plasmic-override={overrides.foreground2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground2)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7EP9R)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "sm") ? (
                        "We are the Business and Consulting Expert"
                      ) : (
                        <React.Fragment>
                          <React.Fragment>{"Helping your "}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#3168DA" }}
                          >
                            {"Business"}
                          </span>
                          <React.Fragment>
                            {" One Pixel at a time"}
                          </React.Fragment>
                        </React.Fragment>
                      )}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__agsM
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            data-plasmic-name={"h3"}
                            data-plasmic-override={overrides.h3}
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#FFFFFF", fontWeight: 400 }}
                              >
                                {
                                  "We believe in making websites affordable and "
                                }
                              </span>
                              <React.Fragment>{"\n"}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#FFFFFF", fontWeight: 400 }}
                              >
                                {
                                  "accessible for small business owners, without the fancy price tags."
                                }
                              </span>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gaOC)}
                  >
                    <p.Stack
                      as={"button"}
                      data-plasmic-name={"contactButton"}
                      data-plasmic-override={overrides.contactButton}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.contactButton
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToContactUs"] = true
                          ? (() => {
                              const actionArgs = {};
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "Ai3Xu8vIQ",
                                  componentUuid: "ZGwlmbejnPqDZ"
                                },
                                () =>
                                  (({ destination }) => {
                                    __nextRouter?.push(destination);
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["goToContactUs"] === "object" &&
                          typeof $steps["goToContactUs"].then === "function"
                        ) {
                          $steps["goToContactUs"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "Ai3Xu8vIQ",
                              componentUuid: "ZGwlmbejnPqDZ"
                            },
                            $steps["goToContactUs"]
                          );
                        }
                      }}
                      ref={ref => {
                        $refs["contactButton"] = ref;
                      }}
                    >
                      {false ? (
                        <Icon29Icon
                          className={classNames(projectcss.all, sty.svg__naQf)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gJd47
                        )}
                      >
                        {"Speak with us"}
                      </div>
                      {false ? (
                        <Icon29Icon
                          className={classNames(projectcss.all, sty.svg__dVrat)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox___0Snn1)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__foXdm)}
            >
              <div className={classNames(projectcss.all, sty.column__esYT)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__pxoh6)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "sm")
                      ? ("237px" as const)
                      : ("228px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/seodapop_main_website/images/pexelsFauxels3183197Jpg.jpg",
                    fullWidth: 6000,
                    fullHeight: 4004,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___3HUe0)}
                  displayHeight={"356px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/seodapop_main_website/images/image2.jpg",
                    fullWidth: 3456,
                    fullHeight: 5184,
                    aspectRatio: undefined
                  }}
                />
              </div>
              {(hasVariant(globalVariants, "screen", "md") ? true : true) ? (
                <div className={classNames(projectcss.all, sty.column__cJ6Hj)}>
                  {(
                    hasVariant(globalVariants, "screen", "md") ? true : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__mTv72)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "sm")
                          ? ("292px" as const)
                          : ("339px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"237px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/seodapop_main_website/images/image.jpg",
                        fullWidth: 6000,
                        fullHeight: 4004,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___8V09S)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/seodapop_main_website/images/pexelsPhoto270360Jpeg.jpg",
                      fullWidth: 3088,
                      fullHeight: 2056,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.column__rytOa)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___4Rvud)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__rsEeI
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "sm") ? (
                        "About us"
                      ) : (
                        <React.Fragment>
                          <React.Fragment>{"We are a"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#37DF46" }}
                          >
                            {" Full Stack"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#7CE98C" }}
                          >
                            {" "}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#1C6801" }}
                          >
                            {"Web Development Agency"}
                          </span>
                          <React.Fragment>
                            {", working to transform "}
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#D40C0C" }}
                          >
                            {"Challenges"}
                          </span>
                          <React.Fragment>{" into "}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#2F1EEC" }}
                          >
                            {"Digital Experiences"}
                          </span>
                        </React.Fragment>
                      )}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nbH6D
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "md")
                        ? "With over 30 years of combined experience in the field we will help you achieve your goals and surpass your expectations. Our expertise includes: Web Development, Web Service Integration, Comprehensive Digital Solutions, Managed Servers, Marketing Services, Creative Design, and much more. Come and meet the masterminds behind it all.\n"
                        : "It's more important than ever to have a digital presence. Get your small business online with our flexible and hassle-free service that works around you.  Our easy, hassle-free, guided process will hold your hand every step of the way. \nWe have a friendly team of supportive project managers who will prompt and guide you gently for every step you need to take with us. \nWe advise all costs upfront so there are no nasty surprises.​​"}
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dSfG)}
                    >
                      <p.Stack
                        as={"button"}
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          sty.button
                        )}
                        onClick={async event => {
                          const $steps = {};
                          $steps["goToAboutUs"] = true
                            ? (() => {
                                const actionArgs = {};
                                return __wrapUserFunction(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "navigation",
                                    interactionUuid: "InTgwy8Kq",
                                    componentUuid: "ZGwlmbejnPqDZ"
                                  },
                                  () =>
                                    (({ destination }) => {
                                      __nextRouter?.push(destination);
                                    })?.apply(null, [actionArgs]),
                                  actionArgs
                                );
                              })()
                            : undefined;
                          if (
                            typeof $steps["goToAboutUs"] === "object" &&
                            typeof $steps["goToAboutUs"].then === "function"
                          ) {
                            $steps["goToAboutUs"] = await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "InTgwy8Kq",
                                componentUuid: "ZGwlmbejnPqDZ"
                              },
                              $steps["goToAboutUs"]
                            );
                          }
                        }}
                      >
                        {false ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__loMm2
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iWoy5
                          )}
                        >
                          {"Read More"}
                        </div>
                        {false ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__n8Lk
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            </p.Stack>
          </div>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__h673E)}>
              <div className={classNames(projectcss.all, sty.freeBox___0Ns9K)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__ubDdh)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__fefth)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hvHjA)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__t7Pg7
                        )}
                      >
                        {"Web Development"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n94BS
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__couLg
                        )}
                      >
                        {
                          "We are a San Diego-Based Digital Product Agency offering top of the line web solutions to ambitious Businesses. We provide the experience of tomorrow through innovative website design and web development using human-centered UX&UI"
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>
                  <div
                    className={classNames(projectcss.all, sty.column__leGd1)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7IdLj
                      )}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__nnyac
                        )}
                      >
                        {"Innovate"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7Q3Xr
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__omWPq
                        )}
                      >
                        {
                          "We combine culture, technology and the latest trends  to create stunning designs that compel and provoke customer intrigue and engagement. Our company creates experiences and offers them to a wide range of services  and businesses from inception to delivery.\n\n"
                        }
                      </div>
                    </p.Stack>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__nF2Hv)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ns0RG)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__e1Uvx
                        )}
                      >
                        {"Grow"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5V7Oh
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7DB0
                        )}
                      >
                        {
                          "After pleasing our clients eyes by making a unique and impressive identity, implementing the strategies that will help them  promote and improve their digital presence.\nOur goal is to transform, scale, and offer stable growth for your business."
                        }
                      </div>
                    </p.Stack>
                  </div>
                </p.Stack>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__og1Pv)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mIaa5)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vg0Yd)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kHyPa)}
                  displayHeight={"140px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"140px" as const}
                  src={
                    "https://old.seodapop.com/wp-content/uploads/2017/01/0671497.jpg" as const
                  }
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ppOpR)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p66Ob
                    )}
                  >
                    {
                      "Many web designers only know how to use templates and that is it, no programming knowledge\nBut Seodapop is different ,he is a master programmer who does web design and seo too\nI got my web page designed with all the seo stuff for very good $\nAlso very nice and friendly staff."
                    }
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3QLvQ)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___5Kuy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cxZch)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__acaGs
                        )}
                      >
                        {"Mel zadeh"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5Q0Y
                      )}
                    >
                      {"CEO,fixnorisk.com"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mo1Zd)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__gUr7L)}
                  displayHeight={"140px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"140px" as const}
                  src={
                    "https://old.seodapop.com/wp-content/uploads/2017/01/Screenshot-from-2017-08-09-13-50-22.png" as const
                  }
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__k8Rz8)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eI5A7
                    )}
                  >
                    {
                      "Seodapop built me a Web site at a very very competitive price and he was able to do things I didn't think we're possible. I will continue to use him for all my business ventures I have referred him numerous times to other business owners which is something I don't do lightly  Seodapop for everything you've done and look forward to working with you in the future keep up that great work Ethic"
                    }
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__c2Nwp)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___14Iwv)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__efYO)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dWzN6
                        )}
                      >
                        {"Mark G."}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2JHq
                      )}
                    >
                      {"AIT Doors CEO."}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oxW40)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qua2R)}
                  displayHeight={"140px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"140px" as const}
                  src={
                    "https://old.seodapop.com/wp-content/uploads/2017/01/Aubree.png" as const
                  }
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5W6KW)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1JYzW
                    )}
                  >
                    {
                      "Our Company has now used Seodapop for two different Websites as we have expanded and changed names. We have been extremely happy with their work. They have proven to be flexible, detail oriented and consistent in every request . I would recommend working with Seodapop to anyone looking to create or revamp their website."
                    }
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wPazn)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eYiz3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Ija5
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kwNzi
                        )}
                      >
                        {"Aubree h."}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sRlRu
                      )}
                    >
                      {"Office Manager,Progressive Contractor Inc."}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__cEhdn)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__ci7C1)} />
            ) : null}
          </div>
          <HomeFooterTop
            data-plasmic-name={"homeFooterTop"}
            data-plasmic-override={overrides.homeFooterTop}
            className={classNames("__wab_instance", sty.homeFooterTop)}
          />

          {true ? (
            <FooterMain
              data-plasmic-name={"footerMain"}
              data-plasmic-override={overrides.footerMain}
              className={classNames("__wab_instance", sty.footerMain)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "foreground2",
    "h1",
    "h3",
    "contactButton",
    "button",
    "homeFooterTop",
    "footerMain"
  ],
  header: ["header"],
  foreground2: ["foreground2", "h1", "h3", "contactButton"],
  h1: ["h1"],
  h3: ["h3"],
  contactButton: ["contactButton"],
  button: ["button"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  foreground2: "div";
  h1: "h1";
  h3: "h3";
  contactButton: "button";
  button: "button";
  homeFooterTop: typeof HomeFooterTop;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    h3: makeNodeComponent("h3"),
    contactButton: makeNodeComponent("contactButton"),
    button: makeNodeComponent("button"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Web application development",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
