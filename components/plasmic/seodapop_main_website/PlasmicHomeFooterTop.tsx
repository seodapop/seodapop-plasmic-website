// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eSHiknYGb4WLC3QGLYLFnQ
// Component: Sh8nt7GR3decD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantspgBiFjijh7ROsO } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PgBiFjijh7ROsO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_seodapop_main_website.module.css"; // plasmic-import: eSHiknYGb4WLC3QGLYLFnQ/projectcss
import sty from "./PlasmicHomeFooterTop.module.css"; // plasmic-import: Sh8nt7GR3decD/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: 6Qw7--xFaSy2Vf/icon

export type PlasmicHomeFooterTop__VariantMembers = {};
export type PlasmicHomeFooterTop__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeFooterTop__VariantsArgs;
export const PlasmicHomeFooterTop__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeFooterTop__ArgsType = {};
type ArgPropType = keyof PlasmicHomeFooterTop__ArgsType;
export const PlasmicHomeFooterTop__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeFooterTop__OverridesType = {
  root?: p.Flex<"div">;
  foreground3?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  button?: p.Flex<"button">;
};

export interface DefaultHomeFooterTopProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomeFooterTop__RenderFunc(props: {
  variants: PlasmicHomeFooterTop__VariantsArgs;
  args: PlasmicHomeFooterTop__ArgsType;
  overrides: PlasmicHomeFooterTop__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspgBiFjijh7ROsO()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qPfQa)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"foreground3"}
          data-plasmic-override={overrides.foreground3}
          hasGap={true}
          className={classNames(projectcss.all, sty.foreground3)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__oWFkL)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {hasVariant(globalVariants, "screen", "sm")
                ? "Take your business to the next level"
                : "Work with us."}
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xqkrs
              )}
            >
              {hasVariant(globalVariants, "screen", "sm")
                ? "Rapidiously revolutionize future-proof niches, and authoritatively \nrestore user-centric e-markets."
                : "Whether you need a new website, or you want to improve an existing one, we approach each of our projects with a passion for innovation and imagination â€“ creating high quality, high performing digital experiences that turn your website in to a marketing machine that gets long-lasting, tangible results for your business.\n\n"}
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8Di3A)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xaaxG)}
            >
              <p.Stack
                as={"button"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.button
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["goToContactUs"] = true
                    ? (() => {
                        const actionArgs = {};
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "_-SgS6jjD",
                            componentUuid: "Sh8nt7GR3decD"
                          },
                          () =>
                            (({ destination }) => {
                              __nextRouter?.push(destination);
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["goToContactUs"] === "object" &&
                    typeof $steps["goToContactUs"].then === "function"
                  ) {
                    $steps["goToContactUs"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "navigation",
                        interactionUuid: "_-SgS6jjD",
                        componentUuid: "Sh8nt7GR3decD"
                      },
                      $steps["goToContactUs"]
                    );
                  }
                }}
              >
                {false ? (
                  <Icon29Icon
                    className={classNames(projectcss.all, sty.svg__xzrbM)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sfxf1
                  )}
                >
                  {"Get IN Touch"}
                </div>
                {false ? (
                  <Icon29Icon
                    className={classNames(projectcss.all, sty.svg__hWNv)}
                    role={"img"}
                  />
                ) : null}
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "foreground3", "h2", "button"],
  foreground3: ["foreground3", "h2", "button"],
  h2: ["h2"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground3: "div";
  h2: "h2";
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeFooterTop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeFooterTop__VariantsArgs;
    args?: PlasmicHomeFooterTop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeFooterTop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomeFooterTop__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomeFooterTop__ArgProps,
          internalVariantPropNames: PlasmicHomeFooterTop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomeFooterTop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeFooterTop";
  } else {
    func.displayName = `PlasmicHomeFooterTop.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeFooterTop = Object.assign(
  // Top-level PlasmicHomeFooterTop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground3: makeNodeComponent("foreground3"),
    h2: makeNodeComponent("h2"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicHomeFooterTop
    internalVariantProps: PlasmicHomeFooterTop__VariantProps,
    internalArgProps: PlasmicHomeFooterTop__ArgProps
  }
);

export default PlasmicHomeFooterTop;
/* prettier-ignore-end */
