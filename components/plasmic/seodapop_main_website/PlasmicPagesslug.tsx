// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eSHiknYGb4WLC3QGLYLFnQ
// Component: sTPn1uNXQV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: UvDP15VkVO5hmb/component
import { SanityFetcher } from "@plasmicpkgs/plasmic-sanity-io"; // plasmic-import: 9KPt6XktlFK/codeComponent
import { RichText } from "../../PortableText"; // plasmic-import: z4BjgnwqwS/codeComponent
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: Sh8nt7GR3decD/component
import FooterMain from "../../FooterMain"; // plasmic-import: I_5el5M-Bk81Xi/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_seodapop_main_website.module.css"; // plasmic-import: eSHiknYGb4WLC3QGLYLFnQ/projectcss
import sty from "./PlasmicPagesslug.module.css"; // plasmic-import: sTPn1uNXQV/css

export type PlasmicPagesslug__VariantMembers = {};
export type PlasmicPagesslug__VariantsArgs = {};
type VariantPropType = keyof PlasmicPagesslug__VariantsArgs;
export const PlasmicPagesslug__VariantProps = new Array<VariantPropType>();

export type PlasmicPagesslug__ArgsType = {
  pageData?: "Dynamic options";
  individualPageDetail?: any;
};
type ArgPropType = keyof PlasmicPagesslug__ArgsType;
export const PlasmicPagesslug__ArgProps = new Array<ArgPropType>(
  "pageData",
  "individualPageDetail"
);

export type PlasmicPagesslug__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  sanityFetcher?: p.Flex<typeof SanityFetcher>;
  text?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  richText?: p.Flex<typeof RichText>;
  homeFooterTop?: p.Flex<typeof HomeFooterTop>;
  footerMain?: p.Flex<typeof FooterMain>;
};

export interface DefaultPagesslugProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPagesslug__RenderFunc(props: {
  variants: PlasmicPagesslug__VariantsArgs;
  args: PlasmicPagesslug__ArgsType;
  overrides: PlasmicPagesslug__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          pageData: "Dynamic options" as const,
          individualPageDetail: {
            _createdAt: "2023-06-01T20:45:06Z",
            _id: "drafts.3a81fa47-e82d-45c4-8a0a-65f88e5ace56",
            _rev: "256c7528-fbea-47a0-85a5-1bc182556ca1",
            _type: "page",
            _updatedAt: "2023-06-02T18:47:02Z",
            body: [
              {
                _key: "64c2e46ff2c5",
                _type: "block",
                children: [
                  {
                    _key: "3f88193799bd0",
                    _type: "span",
                    marks: [],
                    text: "ADA stands for the Americans with Disabilities Act, which aims to ensure equal access and non-discrimination for individuals with disabilities. ADA compliance for websites refers to making websites accessible to people with disabilities, including those with visual, auditory, motor, or cognitive impairments. Here are some key points regarding ADA compliance website updates:"
                  }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "f1177657f13f",
                _type: "block",
                children: [
                  {
                    _key: "24008f68cb450",
                    _type: "span",
                    marks: [],
                    text: "Accessibility Guidelines: "
                  }
                ],
                markDefs: [],
                style: "h4"
              },
              {
                _key: "483cfe8216c7",
                _type: "block",
                children: [
                  {
                    _key: "005636528db3",
                    _type: "span",
                    marks: [],
                    text: "ADA compliance for websites typically follows the Web Content Accessibility Guidelines (WCAG), which provide a set of standards and best practices for making web content accessible. The current version of WCAG is WCAG 2.1, which includes guidelines for various accessibility aspects, such as perceivable content, operable user interfaces, understandable information, and robust technology."
                  }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "0448ad4b3e88",
                _type: "block",
                children: [
                  {
                    _key: "bae80ae1c9d40",
                    _type: "span",
                    marks: [],
                    text: "Perceivable Content: "
                  }
                ],
                markDefs: [],
                style: "h4"
              },
              {
                _key: "dbd6081d7ef1",
                _type: "block",
                children: [
                  {
                    _key: "4d3f4a34098a",
                    _type: "span",
                    marks: [],
                    text: "ADA compliance involves ensuring that website content is perceivable by individuals with disabilities. This includes providing alternative text for images, captions for videos, text alternatives for non-text content, and the ability to adjust text size and contrast."
                  }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "f8416ed913df",
                _type: "block",
                children: [
                  {
                    _key: "b9150bc3fb220",
                    _type: "span",
                    marks: [],
                    text: "Operable User Interfaces: "
                  }
                ],
                markDefs: [],
                style: "h4"
              },
              {
                _key: "0cb2b51e4886",
                _type: "block",
                children: [
                  {
                    _key: "39a679785140",
                    _type: "span",
                    marks: [],
                    text: "Websites should have user interfaces that can be easily operated by people with disabilities. This includes providing keyboard accessibility, ensuring that all functionalities are operable through a keyboard interface, and avoiding design elements that may cause seizures or other physical reactions."
                  }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "a93256780901",
                _type: "block",
                children: [
                  {
                    _key: "e6d4f42b9a620",
                    _type: "span",
                    marks: [],
                    text: "Understandable Information: "
                  }
                ],
                markDefs: [],
                style: "h4"
              },
              {
                _key: "c2ab4efc3ea3",
                _type: "block",
                children: [
                  {
                    _key: "99e12399ebd9",
                    _type: "span",
                    marks: [],
                    text: "ADA-compliant websites aim to present information and functionality in a clear and understandable manner. This involves using clear and concise language, providing instructions and cues to help users navigate and interact with the website, and avoiding design elements that may cause confusion."
                  }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "c5f25dcad8d0",
                _type: "block",
                children: [
                  {
                    _key: "6aa7c63ab7840",
                    _type: "span",
                    marks: [],
                    text: "Robust Technology: "
                  }
                ],
                markDefs: [],
                style: "h4"
              },
              {
                _key: "8db06b249855",
                _type: "block",
                children: [
                  {
                    _key: "dedffb2e8614",
                    _type: "span",
                    marks: [],
                    text: "ADA compliance considers the use of robust and compatible technology to ensure accessibility. This includes using markup and code that can be correctly interpreted by assistive technologies, supporting industry standards, and testing websites across different browsers and devices."
                  }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "f6aa384c59a9",
                _type: "block",
                children: [
                  {
                    _key: "978b29278b0f0",
                    _type: "span",
                    marks: [],
                    text: "Assistive Technologies: "
                  }
                ],
                markDefs: [],
                style: "h4"
              },
              {
                _key: "c4b24b0e3fff",
                _type: "block",
                children: [
                  {
                    _key: "5b7f2637e712",
                    _type: "span",
                    marks: [],
                    text: "ADA-compliant websites should be compatible with assistive technologies, such as screen readers, screen magnifiers, and voice recognition software. Developers need to ensure that the website structure and content are accessible to these technologies, allowing individuals with disabilities to access and interact with the website effectively."
                  }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "f72d306a97d2",
                _type: "block",
                children: [
                  {
                    _key: "d172023ff5400",
                    _type: "span",
                    marks: [],
                    text: "Regular Audits and Updates: "
                  }
                ],
                markDefs: [],
                style: "h4"
              },
              {
                _key: "83a2159503bc",
                _type: "block",
                children: [
                  {
                    _key: "1a8d0b10b6bf",
                    _type: "span",
                    marks: [],
                    text: "ADA compliance for websites is an ongoing process. Regular audits and updates are necessary to identify and address any accessibility issues that may arise. This may involve conducting accessibility audits, user testing with individuals with disabilities, and implementing necessary changes to improve accessibility."
                  }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "036f4312aa8a",
                _type: "block",
                children: [
                  { _key: "28a47941e52c", _type: "span", marks: [], text: "" }
                ],
                markDefs: [],
                style: "normal"
              },
              {
                _key: "c0e430e03293",
                _type: "block",
                children: [
                  {
                    _key: "fbec02e288d30",
                    _type: "span",
                    marks: [],
                    text: "ADA compliance website updates are important to ensure inclusivity, provide equal access to information and services, and avoid potential legal issues. By making websites accessible, businesses can reach a broader audience, improve user experience, and demonstrate their commitment to inclusivity and social responsibility."
                  }
                ],
                markDefs: [],
                style: "normal"
              }
            ],
            mainImage: {
              _type: "image",
              asset: {
                _ref: "image-70e7aab01133cfec061c2bc30dc55ce7a8b28059-6000x4000-jpg",
                _type: "reference"
              }
            },
            slug: { _type: "slug", current: "ada-updates" },
            title: "ADA Updates"
          }
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              sty.root
            )}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__tSr9A)}>
              <SanityFetcher
                data-plasmic-name={"sanityFetcher"}
                data-plasmic-override={overrides.sanityFetcher}
                className={classNames("__wab_instance", sty.sanityFetcher)}
                groq={(() => {
                  try {
                    return `*[_type == "page"&& slug.current == "${$props.individualPageDetail.slug.current}" ] {
    _id,
    _createdAt,
    title,    body,'mainImage':mainImage.asset->url
}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                noAutoRepeat={true}
                noLayout={false}
              >
                <ph.DataCtxReader>
                  {$ctx =>
                    true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qaaB1
                        )}
                      >
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.sanityItems[0].title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <p.PlasmicImg
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={(() => {
                            try {
                              return $ctx.sanityItems[0].mainImage;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <RichText
                          data-plasmic-name={"richText"}
                          data-plasmic-override={overrides.richText}
                          className={classNames("__wab_instance", sty.richText)}
                          values={(() => {
                            try {
                              return $ctx.sanityItems[0].body;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    ) : null
                  }
                </ph.DataCtxReader>
              </SanityFetcher>
            </div>
            <HomeFooterTop
              data-plasmic-name={"homeFooterTop"}
              data-plasmic-override={overrides.homeFooterTop}
              className={classNames("__wab_instance", sty.homeFooterTop)}
            />

            <FooterMain
              data-plasmic-name={"footerMain"}
              data-plasmic-override={overrides.footerMain}
              className={classNames("__wab_instance", sty.footerMain)}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sanityFetcher",
    "text",
    "img",
    "richText",
    "homeFooterTop",
    "footerMain"
  ],
  header: ["header"],
  sanityFetcher: ["sanityFetcher", "text", "img", "richText"],
  text: ["text"],
  img: ["img"],
  richText: ["richText"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  sanityFetcher: typeof SanityFetcher;
  text: "div";
  img: typeof p.PlasmicImg;
  richText: typeof RichText;
  homeFooterTop: typeof HomeFooterTop;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPagesslug__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPagesslug__VariantsArgs;
    args?: PlasmicPagesslug__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPagesslug__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPagesslug__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPagesslug__ArgProps,
          internalVariantPropNames: PlasmicPagesslug__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPagesslug__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPagesslug";
  } else {
    func.displayName = `PlasmicPagesslug.${nodeName}`;
  }
  return func;
}

export const PlasmicPagesslug = Object.assign(
  // Top-level PlasmicPagesslug renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sanityFetcher: makeNodeComponent("sanityFetcher"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),
    richText: makeNodeComponent("richText"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicPagesslug
    internalVariantProps: PlasmicPagesslug__VariantProps,
    internalArgProps: PlasmicPagesslug__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPagesslug;
/* prettier-ignore-end */
